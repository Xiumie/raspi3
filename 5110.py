#!/usr/bin/python
# -*- coding: utf-8 -*-
import RPi.GPIO as GPIO
import time
import sys
import requests
import json
import socket
import urllib
import os
import string
from BMP180 import BMP180
#gpio's :
SCLK = 24
DIN = 22
DC = 27
RST = 17
font =[
0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x5f, 0x00, 0x00,
0x00, 0x07, 0x00, 0x07, 0x00,
0x14, 0x7f, 0x14, 0x7f, 0x14,
0x24, 0x2a, 0x7f, 0x2a, 0x12,
0x23, 0x13, 0x08, 0x64, 0x62,
0x36, 0x49, 0x55, 0x22, 0x50,
0x00, 0x05, 0x03, 0x00, 0x00,
0x00, 0x1c, 0x22, 0x41, 0x00,
0x00, 0x41, 0x22, 0x1c, 0x00,
0x14, 0x08, 0x3e, 0x08, 0x14,
0x08, 0x08, 0x3e, 0x08, 0x08,
0x00, 0x50, 0x30, 0x00, 0x00,
0x08, 0x08, 0x08, 0x08, 0x08,
0x00, 0x60, 0x60, 0x00, 0x00,
0x20, 0x10, 0x08, 0x04, 0x02,
0x3e, 0x51, 0x49, 0x45, 0x3e,
0x00, 0x42, 0x7f, 0x40, 0x00,
0x42, 0x61, 0x51, 0x49, 0x46,
0x21, 0x41, 0x45, 0x4b, 0x31,
0x18, 0x14, 0x12, 0x7f, 0x10,
0x27, 0x45, 0x45, 0x45, 0x39,
0x3c, 0x4a, 0x49, 0x49, 0x30,
0x01, 0x71, 0x09, 0x05, 0x03,
0x36, 0x49, 0x49, 0x49, 0x36,
0x06, 0x49, 0x49, 0x29, 0x1e,
0x00, 0x36, 0x36, 0x00, 0x00,
0x00, 0x56, 0x36, 0x00, 0x00,
0x08, 0x14, 0x22, 0x41, 0x00,
0x14, 0x14, 0x14, 0x14, 0x14,
0x00, 0x41, 0x22, 0x14, 0x08,
0x02, 0x01, 0x51, 0x09, 0x06,
0x32, 0x49, 0x79, 0x41, 0x3e,
0x7E, 0x11, 0x11, 0x11, 0x7E, # A
0x7F, 0x49, 0x49, 0x49, 0x36, # B
0x3E, 0x41, 0x41, 0x41, 0x22, # C
0x7F, 0x41, 0x41, 0x22, 0x1C, # D
0x7F, 0x49, 0x49, 0x49, 0x41, # E
0x7F, 0x09, 0x09, 0x09, 0x01, # F
0x3E, 0x41, 0x49, 0x49, 0x7A, # G
0x7F, 0x08, 0x08, 0x08, 0x7F, # H
0x00, 0x41, 0x7F, 0x41, 0x00, # I
0x20, 0x40, 0x41, 0x3F, 0x01, # J
0x7F, 0x08, 0x14, 0x22, 0x41, # K
0x7F, 0x40, 0x40, 0x40, 0x40, # L
0x7F, 0x02, 0x0C, 0x02, 0x7F, # M
0x7F, 0x04, 0x08, 0x10, 0x7F, # N
0x3E, 0x41, 0x41, 0x41, 0x3E, # O
0x7F, 0x09, 0x09, 0x09, 0x06, # P
0x3E, 0x41, 0x51, 0x21, 0x5E, # Q
0x7F, 0x09, 0x19, 0x29, 0x46, # R
0x46, 0x49, 0x49, 0x49, 0x31, # S
0x01, 0x01, 0x7F, 0x01, 0x01, # T
0x3F, 0x40, 0x40, 0x40, 0x3F, # U
0x1F, 0x20, 0x40, 0x20, 0x1F, # V
0x3F, 0x40, 0x38, 0x40, 0x3F, # W
0x63, 0x14, 0x08, 0x14, 0x63, # X
0x07, 0x08, 0x70, 0x08, 0x07, # Y
0x61, 0x51, 0x49, 0x45, 0x43, # Z
0x00, 0x7f, 0x41, 0x41, 0x00,
0x02, 0x04, 0x08, 0x10, 0x20,
0x00, 0x41, 0x41, 0x7f, 0x00,
0x04, 0x02, 0x01, 0x02, 0x04,
0x40, 0x40, 0x40, 0x40, 0x40,
0x00, 0x01, 0x02, 0x04, 0x00,
0x20, 0x54, 0x54, 0x54, 0x78,
0x7f, 0x48, 0x44, 0x44, 0x38,
0x38, 0x44, 0x44, 0x44, 0x20,
0x38, 0x44, 0x44, 0x48, 0x7f,
0x38, 0x54, 0x54, 0x54, 0x18,
0x08, 0x7e, 0x09, 0x01, 0x02,
0x0c, 0x52, 0x52, 0x52, 0x3e,
0x7f, 0x08, 0x04, 0x04, 0x78,
0x00, 0x44, 0x7d, 0x40, 0x00,
0x20, 0x40, 0x44, 0x3d, 0x00,
0x7f, 0x10, 0x28, 0x44, 0x00,
0x00, 0x41, 0x7f, 0x40, 0x00,
0x7c, 0x04, 0x18, 0x04, 0x78,
0x7c, 0x08, 0x04, 0x04, 0x78,
0x38, 0x44, 0x44, 0x44, 0x38,
0x7c, 0x14, 0x14, 0x14, 0x08,
0x08, 0x14, 0x14, 0x18, 0x7c,
0x7c, 0x08, 0x04, 0x04, 0x08,
0x48, 0x54, 0x54, 0x54, 0x20,
0x04, 0x3f, 0x44, 0x40, 0x20,
0x3c, 0x40, 0x40, 0x20, 0x7c,
0x1c, 0x20, 0x40, 0x20, 0x1c,
0x3c, 0x40, 0x30, 0x40, 0x3c,
0x44, 0x28, 0x10, 0x28, 0x44,
0x0c, 0x50, 0x50, 0x50, 0x3c,
0x44, 0x64, 0x54, 0x4c, 0x44,
0x00, 0x08, 0x36, 0x41, 0x00,
0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x41, 0x36, 0x08, 0x00,
0x10, 0x08, 0x08, 0x10, 0x08,
]

flgsen = 0 #设置是否发送到yeelnik

def main():
	begin(0xbc) # contrast - may need tweaking for each display
	if check_network() == True:
		flgsen = 1
		s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		s.connect(("1.1.1.1", 80))
		ipaddr = s.getsockname()[0]
		s.close()
		gotoxy(0,0)
		text(ipaddr)
	
	cpu_tmp = get_CPU_temp()
	gpu_tmp = get_GPU_temp()
	
	if flgsen == 1:
		apiurl = 'http://api.yeelink.net/v1.1/device'
		apiheaders = {'U-Apikey': '', 'content-type': 'application/json'}
		payload = {'value': cpu_tmp}
		r = requests.post(apiurl, headers=apiheaders, data=json.dumps(payload))
		if r.status_code == 200:
			print 'cpu temp success'
		else:
			print 'cpu temp failure'
	
	gotoxy(0,2)
	cpu_tmp = 'C:' + cpu_tmp 
	text(cpu_tmp)
	gotoxy(6*7,2)
	gpu_tmp = 'G:' + gpu_tmp
	text(gpu_tmp)
	
	gotoxy(0,5)
	text(time.strftime("%m-%d %H:%M:%S", time.localtime()))
	
	print cpu_tmp, gpu_tmp
	
	bmptemp, bmppre, bmpalt = bmp180()
	
	if flgsen == 1:
		apiurl = 'http://api.yeelink.net/v1.1/device'
		apiheaders = {'U-Apikey': '', 'content-type': 'application/json'}
		payload = {'value': bmptemp}
		r = requests.post(apiurl, headers=apiheaders, data=json.dumps(payload))
		if r.status_code == 200:
			print 'BMP180 temp success'
		else:
			print 'BMP180 temp failure'

		apiurl = 'http://api.yeelink.net/v1.1/device'
		apiheaders = {'U-Apikey': '', 'content-type': 'application/json'}
		payload = {'value': bmppre}
		r = requests.post(apiurl, headers=apiheaders, data=json.dumps(payload))
		if r.status_code == 200:
			print 'BMP180 pre success'
		else:
			print 'BMP180 pre failure'

	sbmptemp = str(bmptemp)
	sbmppre = str(bmppre)
	sbmp180 = 'T:' + sbmptemp + ' ' + sbmppre
	gotoxy(0,3)
	text(sbmp180)
	#GPIO.cleanup()
	print bmptemp, bmppre, bmpalt

def bmp180():
	bmp=BMP180()
	bmp180temp=bmp.read_temperature()
	bmp180pre=bmp.read_pressure()
	bmp180alt=bmp.read_altitude()
	return bmp180temp,bmp180pre,bmp180alt

def check_network():
	cnt = 0
	while cnt <= 10:
		try:
			result = urllib.urlopen('https://www.baidu.com/').read()
			return True
		except Exception , e:
			gotoxy(0,0)
			text("No Network!   ")
			time.sleep(3)
		cnt += 1
	return False

def get_CPU_temp():
	f = file("/sys/class/thermal/thermal_zone0/temp")
	temp = float(f.read().strip("\n"))/1000
	return "%.1f" % temp

def get_GPU_temp():
	status = os.popen("/opt/vc/bin/vcgencmd measure_temp").read().strip("\n")
	return status.split("=")[1].replace("\'C", "")

def gotoxy(x,y):
  lcd_cmd(x+128)
  lcd_cmd(y+64)
def text(words):
  for i in range(len(words)):
#    print (words[i])
    display_char(words[i])
def display_char(char):
  index=(ord(char)-32)*5
  if ord(char) >=33 and ord(char) <=122:
    for i in range(5):
#      print (index+i)
      lcd_data(font[index+i])
    lcd_data(0) # space inbetween characters
  elif ord(char)==32:
      lcd_data(0)
      lcd_data(0)
      lcd_data(0)
      lcd_data(0)
      lcd_data(0)
      lcd_data(0)
def cls():
  gotoxy(0,0)
  for i in range(84):
    for j in range(6):
      lcd_data(0)
def setup():
  # set pin directions
  GPIO.setwarnings(False)
  GPIO.setmode(GPIO.BCM)
  GPIO.setup(DIN, GPIO.OUT)
  GPIO.setup(SCLK, GPIO.OUT)
  GPIO.setup(DC, GPIO.OUT)
  GPIO.setup(RST, GPIO.OUT)
def begin(contrast):
  setup()
  # toggle RST low to reset
  GPIO.output(RST, False)
  time.sleep(0.100)
  GPIO.output(RST, True)
  lcd_cmd(0x21) # extended mode
  lcd_cmd(0x14) # bias
  lcd_cmd(contrast) # vop
  lcd_cmd(0x20) # basic mode
  lcd_cmd(0xc) # non-inverted display
  cls()
def SPI(c):
  # data = DIN
  # clock = SCLK
  # MSB first
  # value = c
  for i in xrange(8):
    GPIO.output(DIN, (c & (1 << (7-i))) > 0)
    GPIO.output(SCLK, True)
    GPIO.output(SCLK, False)
def lcd_cmd(c):
#  print ("lcd_cmd sent :",hex(c))
  GPIO.output(DC, False)
  SPI(c)
def lcd_data(c):
#  print ("data sent :",hex(c))
  GPIO.output(DC, True)
  SPI(c)
if __name__ == "__main__":
  main()
